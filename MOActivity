public class MOActivityServiceImpl implements MOActivityService {

    @Autowired
    RMOConfigService configData;

    @Autowired
    RmoUtil rmoUtil;

    @Autowired
    RmoActivityRepo rmoActivityRepo;

    @Autowired
    private CassandraOperations cassandraTemplate;

    @Autowired
    CqlTemplate cqlTemplate;

    @Value("${rmo.Activity.TimeZone}")
    private String timeZoneValue;

    @Autowired
    private PrinterActivityRepo printActivityRepo;
    @Override
    public MoActivityResponse moActivity(MOActivityRequest moActivityRequest, String authorization) {
        // getPurchaserInfo("chandu");
        List<RmoActivity> moActivityinfo  =getRmoActivityinfoDB(moActivityRequest,authorization);
     /*   List<RmoActivity> moActivityinfo =rmoActivityRepo.getMoActivityinfo(moActivityRequest.getDateRangeFrom(),moActivityRequest.getDateRangeTo(),moActivityRequest.getActivityType().toString());
        log.info("[MOActivityServiceImpl] moActivity order data : "+moActivityinfo);
        moActivityinfo.forEach (a -> {
            log.info("The RmoActivity data :"+a.getCheckData()+  ": order ID : "+a.getKey().getOrderId());

                }

        );*/

        List<MOActivity> activityList = new ArrayList<>();
        MoActivityResponse moActivityResponce = new MoActivityResponse();
        for(RmoActivity activityinfo:moActivityinfo){
            log.info("The order ID and serial number si  :"+activityinfo.getOrderId()+" serial :"+activityinfo.getKey().getMoSerialNumber());
            if(!StringUtils.isEmpty(activityinfo.getOrderId().trim()) && !activityList.stream(). anyMatch(a ->StringUtils.defaultIfEmpty(a.getOrderId(),"").equalsIgnoreCase(activityinfo.getOrderId()))) {
                MOActivity moResponce = new MOActivity().builder()
                        .orderId(StringUtils.isEmpty(activityinfo.getOrderId()) ? null : activityinfo.getOrderId())
                        .type(activityinfo.getMoType())
                        //.dateTime(activityinfo.getCustomerId())
                        .operatorId(activityinfo.getOperatorId())
//                        .amount(activityinfo.getAmount())
                        .amount(getTotalAmount(activityinfo.getOrderId(), moActivityinfo))
                        .totalChecks(getTotalChecks(activityinfo.getOrderId(), moActivityinfo))
                        .checks(getChecksinfo(activityinfo.getOrderId(), moActivityinfo))
                        .purchaser(getPurchaserInfo(activityinfo.getCustomerData()))
                        .build();
                log.info("[moActivity] moResponce adding to list final : " + moResponce.toString());
                activityList.add(moResponce);
            }else if(StringUtils.isEmpty(activityinfo.getOrderId().trim())){

                MOActivity moResponce = new MOActivity().builder()
                        .orderId(StringUtils.isEmpty(activityinfo.getOrderId()) ? null : activityinfo.getOrderId())
                        .type(activityinfo.getMoType())
                        .operatorId(activityinfo.getOperatorId())
                        .amount(activityinfo.getAmount())
                        .checks(convertBlobToCheck(activityinfo.getCheckData()))
                        .purchaser(getPurchaserInfo(activityinfo.getCustomerData()))
                        .build();
                log.info("[moActivity] moResponce adding to list final where order is Empty : " + moResponce.toString());
                activityList.add(moResponce);

            }else{
                log.info("moActivity] moResponce in the final order ID is already processed :"+activityinfo.getOrderId());
            }
        }
        moActivityResponce.setActivities(activityList);
        moActivityResponce.setPrintActivity(getPrintActivityinfo(moActivityRequest,authorization));
        return moActivityResponce;
    }

    private List<Check> convertBlobToCheck(String checkData) {
        List<Check> checkdata = new ArrayList<>();
        boolean isvalid = validatejson(checkData);
        if(isvalid) {
            ObjectMapper obj = new ObjectMapper();
            JsonNode jsonArray = null;
            Check checkDb = null;
            try {
                checkDb = obj.readValue(checkData, Check.class);
            } catch (JsonProcessingException e) {
                log.error("[convertBlobToCheck] error in parcing Check : {}", e.getMessage());
                throw new RuntimeException(e);
            }

            log.info("[convertBlobToCheck] check object after parsing  :" + checkDb.toString());
            checkdata.add(checkDb);
        }
        return checkdata;
    }

    private List<Check> getBuildCheckinfo(RmoActivity activityinfo) {
        List<Check> checkData = new ArrayList<>();
        Check checkinfo = new Check();
        checkinfo.setSerialNumber(activityinfo.getKey().getMoSerialNumber());
        checkinfo.setDate(activityinfo.getKey().getMoDate());
        checkinfo.setTime(activityinfo.getKey().getMoTime());
        checkinfo.setPayAmount(activityinfo.getAmount());
        checkinfo.setStatus(activityinfo.getStatus());
        checkData.add(checkinfo);
        return checkData;
    }

    private List<PrintActivityResponse> getPrintActivityinfo(MOActivityRequest moActivityRequest, String authorization) {
        List<PrintActivityResponse> pringActivitylist = new ArrayList<>();
        AgentAccessDetails agentDetails = null;
        try {
            agentDetails = rmoUtil.getAgentDetailsAndAgentAccessDetails(authorization);
        } catch (ParseException e) {
            // throw new RuntimeException(e);
            log.error("ParseException while calling agentDetails API in print Activity : {}",e.getMessage());
        } catch (Exception e){
            log.error("Exception while calling agentDetails API in print Activity: {}",e.getMessage());
        }

        StringBuffer querystr =null;
        String fromDate = StringUtils.stripStart(moActivityRequest.getDateRangeFrom(), null);
        String[] fromDateArray = fromDate.split(" ");
        String todate = StringUtils.stripStart(moActivityRequest.getDateRangeTo(), null);
        String[] todateArray = todate.split(" ");
        if(fromDateArray.length >1 &&todateArray.length>1){
            log.info("[getPrintActivityinfo] sprlit of the string values : "+fromDateArray[0] +" time value"+fromDateArray[1]);

            querystr = new StringBuffer();
            querystr.append("select action_type ,operator_id ,activity_date ,activity_time ,terminal_id  from agent_order_services.print_activity where activity_date >=");
            querystr.append("'"+fromDateArray[0]+"'");
            querystr.append(" and activity_date <=");
            querystr.append("'"+todateArray[0]+"'");
//            querystr.append("and created_timestamp >=");
//            querystr.append("'"+Timestamp.valueOf(fromDate)+"+"+timeZoneValue+"'");
//            querystr.append(" and created_timestamp <=");
//            querystr.append("'"+Timestamp.valueOf(todate)+"+"+timeZoneValue+"'");
            querystr.append(" and terminal_id =");
            querystr.append("'"+agentDetails.getAgentDetails().getTerminalId()+"'");
            querystr.append(" ALLOW FILTERING");

        }else{
            querystr = new StringBuffer();
            querystr.append("select action_type ,operator_id ,activity_date ,activity_time ,terminal_id  from agent_order_services.print_activity where activity_date >=");
            querystr.append("'"+fromDate+"'");
            querystr.append(" and activity_date <=");
            querystr.append("'"+todate+"'");
            querystr.append(" and terminal_id =");
            querystr.append("'"+agentDetails.getAgentDetails().getTerminalId()+"'");
            querystr.append(" ALLOW FILTERING");
        }

        log.info("[MoActivityServiceImpl] getPrintActivityinfo the query Str :"+querystr.toString());
        List<PrinterActivity> printDatalist = new ArrayList<>();
        List<PrinterActivity> printdata = cqlTemplate.query(querystr.toString(), new ResultSetExtractor<List<PrinterActivity>>() {
            @Override
            public List<PrinterActivity> extractData(ResultSet resultSet) throws DriverException, DataAccessException {
                Iterator<Row> dataIterater = resultSet.iterator();
                while (dataIterater.hasNext()){
                    Row printActivityinfo = dataIterater.next();
                    PrinterActivity printAct =new PrinterActivity();
                    printAct.setPrinterAction(PrinterActions.valueOf(printActivityinfo.getString(0)));
                    printAct.setOperatorId(printActivityinfo.getString(1));
                    printAct.setDate(printActivityinfo.getString(2));
                    printAct.setTime(printActivityinfo.getString(3));
                    printAct.setTerminalId(printActivityinfo.getString(4));
                    printDatalist.add(printAct);
                }
                return printDatalist;
            }
        });
        printDatalist.forEach(printAct ->{
            PrintActivityResponse printActResponce = new PrintActivityResponse().builder()
                    .type("PRINTER_LOGS")
                    .action(printAct.getPrinterAction().toString())
                    .operatorId(printAct.getOperatorId())
                    .date(printAct.getDate())
                    .time(printAct.getTime())
                    .build();
            pringActivitylist.add(printActResponce);
        });
        return pringActivitylist;
    }

    private Customer getPurchaserInfo(String customerData) {
        boolean isvalid = validatejson(customerData);
        Customer customerObj =null;
        if (isvalid && !StringUtils.isEmpty(customerData.trim())) {
            log.info("Checking if the json is valid true::" + customerData);
            ObjectMapper obj = new ObjectMapper();
            try {
                customerObj = obj.readValue(customerData, Customer.class);
            } catch (JsonProcessingException e) {
                log.error("[getPurchaserInfo] Error in parsing CustomerData : {}",e.getMessage());
                throw new RuntimeException(e);
            }
        }
        log.info("Checking if the json is valid ::" + isvalid);
        return customerObj;
    }

    private boolean validatejson(String customerData) {
        ObjectMapper obj = new ObjectMapper().enable(DeserializationFeature.FAIL_ON_TRAILING_TOKENS);
        try {
            obj.readTree(customerData);
        } catch (JacksonException e) {
            return false;
        }
        return true;
    }

    private List<RmoActivity> getRmoActivityinfoDB(MOActivityRequest moActivityRequest, String authorization) {
        AgentAccessDetails agentDetails = null;
        try {
            agentDetails = rmoUtil.getAgentDetailsAndAgentAccessDetails(authorization);
        } catch (ParseException e) {
            // throw new RuntimeException(e);
            log.error("ParseException while calling agentDetails API : {}",e.getMessage());
        } catch (Exception e){
            log.error("Exception while calling agentDetails API : {}",e.getMessage());
        }
        List<RmoActivity> rmoActivityinfo = new ArrayList<>();
        StringBuffer querystr =null;
        String fromDate = StringUtils.stripStart(moActivityRequest.getDateRangeFrom(), null);
        String[] fromDateArray = fromDate.split(" ");
        String todate = StringUtils.stripStart(moActivityRequest.getDateRangeTo(), null);
        String[] todateArray = todate.split(" ");
        if(fromDateArray.length >1 &&todateArray.length>1){
            log.info("[getRmoActivityinfoDB] sprlit of the string values : "+fromDateArray[0] +" time value"+fromDateArray[1]);

            querystr = new StringBuffer();
            querystr.append("select order_id ,mo_type ,operator_id ,created_date ,amount ,blobAsText(check_data) as checkData,blobAsText(customer_data) as customerData,status ,updated_date,mo_serialnumber,mo_date ,mo_time,numberof_check   from agent_order_services.rmo_activity_v1 where mo_date >=");
            querystr.append("'"+fromDateArray[0]+"'");
            querystr.append(" and  mo_date <=");
            querystr.append("'"+todateArray[0]+"'");
            querystr.append(" and created_date >=");
            querystr.append("'"+ Timestamp.valueOf(fromDate)+"+"+timeZoneValue+"'");
            querystr.append(" and  created_date <=");
            querystr.append("'"+Timestamp.valueOf(todate)+"+"+timeZoneValue+"'");
            //querystr.append(" and mo_type =");
            // querystr.append("'"+moActivityRequest.getActivityType()+"'");
            querystr.append(" and terminal_id=");
            querystr.append("'"+agentDetails.getAgentDetails().getTerminalId()+"'");
            querystr.append(" ALLOW FILTERING");

        }else{
            querystr = new StringBuffer();
            querystr.append("select order_id ,mo_type ,operator_id ,created_date ,amount ,blobAsText(check_data) as checkData,blobAsText(customer_data) as customerData,status ,updated_date,mo_serialnumber,mo_date ,mo_time,numberof_check   from agent_order_services.rmo_activity_v1 where mo_date >=");
            querystr.append("'"+moActivityRequest.getDateRangeFrom()+"'");
            querystr.append(" and  mo_date <=");
            querystr.append("'"+moActivityRequest.getDateRangeTo()+"'");
            // querystr.append(" and mo_type =");
            // querystr.append("'"+moActivityRequest.getActivityType()+"'");
            querystr.append(" and terminal_id=");
            querystr.append("'"+agentDetails.getAgentDetails().getTerminalId()+"'");
            querystr.append(" ALLOW FILTERING");
        }

        log.info("[MoActivityServiceImpl] getRmoActivityinfoDB the query Str :"+querystr.toString());
        List<RmoActivity> resultDB = cqlTemplate.query(querystr.toString(), new ResultSetExtractor<List<RmoActivity>>() {
            @Override
            public List<RmoActivity> extractData(ResultSet resultSet) throws DriverException, DataAccessException {
                Iterator<Row> itrdata = resultSet.iterator();
                while (itrdata.hasNext()){
                    Row dataActivity = itrdata.next();
                    log.info("Activity row data is 01  :"+dataActivity.getString(0));
                    log.info("Activity row data is 02  :"+dataActivity.getString(1));
                    log.info("Activity row data is 03  :"+dataActivity.getObject(3));
                    log.info("Activity row data is 05  :"+dataActivity.getString(5));
                    RmoActivityPk key =new RmoActivityPk("TR123",dataActivity.getString(9), dataActivity.getString(10), dataActivity.getString(11));
                    RmoActivity rmoActivity = new RmoActivity().builder()
                            .key(key)
                            .orderId(dataActivity.getString(0))
                            .moType(MoneyOrderType.valueOf(dataActivity.getString(1)))
                            .operatorId(dataActivity.getString(2))
                            .customerId(dataActivity.getObject(3).toString())
                            .amount(dataActivity.getString(4))
                            .checkData(dataActivity.getString(5))
                            .customerData(dataActivity.getString(6))
                            .status(dataActivity.getString(7))
                            .updatedDate(Timestamp.from(dataActivity.getInstant(8)))
                            .numberOfCheck(dataActivity.getInt(12))

                            .build();
                    rmoActivityinfo.add(rmoActivity);
                }
                log.info("The Activity data is : "+rmoActivityinfo);
                return rmoActivityinfo;
            }
        });
        return rmoActivityinfo;
    }

    private void getDataFromDB() {
        Stream<RmoActivity> resultDat = cassandraTemplate.stream("select * from agent_order_services.rmo_activity_v1 where mo_date >='2023-08-29' and  mo_date <='2023-08-31' and mo_type ='MO_SALE' ALLOW FILTERING", RmoActivity.class);
        resultDat.forEach(a ->{
            log.info("The values from DB : "+a);
        });

        List<RmoActivity> resultDB = cqlTemplate.query("select order_id,Blobastext(check_data) as checkData from agent_order_services.rmo_activity_v1 where mo_date >='2023-08-29' and  mo_date <='2023-08-31' and mo_type ='MO_SALE' ALLOW FILTERING", new ResultSetExtractor<List<RmoActivity>>() {
            @Override
            public List<RmoActivity> extractData(ResultSet resultSet) throws DriverException, DataAccessException {
                log.info("Extracting data from result Set : "+resultSet.iterator().next().toString());
                Iterator<Row> itrdata = resultSet.iterator();
                while (itrdata.hasNext()){
                    Row dataActivity = itrdata.next();
                    log.info("Activity row data is 01  :"+dataActivity.getString(0));
                    log.info("Activity row data is 02  :"+dataActivity.getString(1));
                }
                return null;
            }
        });

    }

    private List<Check> getChecksinfo(String orderId, List<RmoActivity> moActivityinfo) {
        /*List<RmoActivity> checksinfo=rmoActivityRepo.getChecksinfo(orderId);
        log.info("the checks info using Order ID :"+checksinfo);*/
        List<RmoActivity> activitylist = moActivityinfo.stream().filter(a -> a.getOrderId().equalsIgnoreCase(orderId)).collect(Collectors.toList());
        log.info("The RmoActivity list with order ID : "+activitylist);
        List<Check> checkslist = activitylist.stream().map(a -> getCheckfromblob(a.getCheckData(),a.getStatus(),a.getUpdatedDate())).collect(Collectors.toList());
        log.info("[getChecksinfo] The check list from DB  : "+checkslist);

        return checkslist;
    }

    private Check getCheckfromblob(String checkData, String status, Timestamp updatedDate) {
        ObjectMapper obj = new ObjectMapper();
        JsonNode jsonArray = null;
        Check checkDb =null;
        try {
            checkDb=obj.readValue(checkData,Check.class);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
        log.info("[getCheckfromblob] check object after parsing  :"+checkDb.toString());
        checkDb.setStatus(status);
        return checkDb;
    }

    private int getTotalChecks(String orderId, List<RmoActivity> moActivityinfo) {
        int totalchecks = moActivityinfo.stream().filter(a -> a.getOrderId().equalsIgnoreCase(orderId)).collect(Collectors.toList()).size();
        return totalchecks;
    }

    private String getTotalAmount(String orderId, List<RmoActivity> moActivityinfo) {
        double totalAmount = moActivityinfo.stream().filter(a -> a.getOrderId().equalsIgnoreCase(orderId)).mapToDouble(b -> Double.parseDouble(b.getAmount())).sum();
        return String.valueOf(totalAmount);
    }
